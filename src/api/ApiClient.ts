//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { ApiBase } from './ApiBase';
import { Config } from './ApiBase';

export class DynastyClient extends ApiBase {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(
    configuration: Config,
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> },
  ) {
    super(configuration);
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param request (optional)
   * @return Success
   */
  dynastyAll(request?: GetDynastiesForUserQuery | undefined): Promise<Dynasty[]> {
    let url_ = this.baseUrl + '/api/Dynasty?';
    if (request === null) throw new Error("The parameter 'request' cannot be null.");
    else if (request !== undefined)
      url_ += 'request=' + encodeURIComponent('' + request) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'text/plain',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processDynastyAll(_response);
      });
  }

  protected processDynastyAll(response: Response): Promise<Dynasty[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ''
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as Dynasty[]);
        return result200;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<Dynasty[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  dynastyPOST(body?: AddDynastyCommand | undefined): Promise<string> {
    let url_ = this.baseUrl + '/api/Dynasty';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processDynastyPOST(_response);
      });
  }

  protected processDynastyPOST(response: Response): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ''
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as string);
        return result200;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * @return Success
   */
  dynastyGET(id: string): Promise<Dynasty> {
    let url_ = this.baseUrl + '/api/Dynasty/{Id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{Id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'text/plain',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processDynastyGET(_response);
      });
  }

  protected processDynastyGET(response: Response): Promise<Dynasty> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ''
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as Dynasty);
        return result200;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<Dynasty>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  dynastyPUT(id: number, body?: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/Dynasty/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processDynastyPUT(_response);
      });
  }

  protected processDynastyPUT(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  dynastyDELETE(id: number): Promise<void> {
    let url_ = this.baseUrl + '/api/Dynasty/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {},
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processDynastyDELETE(_response);
      });
  }

  protected processDynastyDELETE(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class PersonClient extends ApiBase {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(
    configuration: Config,
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> },
  ) {
    super(configuration);
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  personAll(dynastyId: string): Promise<Person[]> {
    let url_ = this.baseUrl + '/api/Dynasty/{DynastyId}/Person';
    if (dynastyId === undefined || dynastyId === null)
      throw new Error("The parameter 'dynastyId' must be defined.");
    url_ = url_.replace('{DynastyId}', encodeURIComponent('' + dynastyId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'text/plain',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processPersonAll(_response);
      });
  }

  protected processPersonAll(response: Response): Promise<Person[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ''
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as Person[]);
        return result200;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<Person[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  personPOST(dynastyId: string, body?: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/Dynasty/{DynastyId}/Person';
    if (dynastyId === undefined || dynastyId === null)
      throw new Error("The parameter 'dynastyId' must be defined.");
    url_ = url_.replace('{DynastyId}', encodeURIComponent('' + dynastyId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processPersonPOST(_response);
      });
  }

  protected processPersonPOST(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  personGET(id: number, dynastyId: string): Promise<string> {
    let url_ = this.baseUrl + '/api/Dynasty/{DynastyId}/Person/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    if (dynastyId === undefined || dynastyId === null)
      throw new Error("The parameter 'dynastyId' must be defined.");
    url_ = url_.replace('{DynastyId}', encodeURIComponent('' + dynastyId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'text/plain',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processPersonGET(_response);
      });
  }

  protected processPersonGET(response: Response): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ''
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as string);
        return result200;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  personPUT(id: number, dynastyId: string, body?: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/Dynasty/{DynastyId}/Person/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    if (dynastyId === undefined || dynastyId === null)
      throw new Error("The parameter 'dynastyId' must be defined.");
    url_ = url_.replace('{DynastyId}', encodeURIComponent('' + dynastyId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processPersonPUT(_response);
      });
  }

  protected processPersonPUT(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  personDELETE(id: number, dynastyId: string): Promise<void> {
    let url_ = this.baseUrl + '/api/Dynasty/{DynastyId}/Person/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    if (dynastyId === undefined || dynastyId === null)
      throw new Error("The parameter 'dynastyId' must be defined.");
    url_ = url_.replace('{DynastyId}', encodeURIComponent('' + dynastyId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {},
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processPersonDELETE(_response);
      });
  }

  protected processPersonDELETE(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class WeatherForecastClient extends ApiBase {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(
    configuration: Config,
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> },
  ) {
    super(configuration);
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param query (optional)
   * @return Success
   */
  getWeatherForecast(
    query?: GetWeatherForecastsQuery | undefined,
  ): Promise<WeatherForecast[]> {
    let url_ = this.baseUrl + '/api/WeatherForecast?';
    if (query === null) throw new Error("The parameter 'query' cannot be null.");
    else if (query !== undefined) url_ += 'query=' + encodeURIComponent('' + query) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'text/plain',
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processGetWeatherForecast(_response);
      });
  }

  protected processGetWeatherForecast(response: Response): Promise<WeatherForecast[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ''
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as WeatherForecast[]);
        return result200;
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException(
          'If Authorization header not present, has no value or no valid jwt bearer token',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException(
          'If user not authorized to perform requested action',
          status,
          _responseText,
          _headers,
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<WeatherForecast[]>(null as any);
  }
}

export interface AddDynastyCommand {
  name: string | undefined;
  description: string | undefined;
}

export interface ChildRelationship {
  child: Person;
  childId: string;
  relationship: Relationship;
  relationshipId: string;
}

export interface Dynasty {
  id: string;
  createdAt: Date;
  modifiedAt: Date;
  name: string | undefined;
  description: string | undefined;
  members: Person[] | undefined;
}

export interface GetDynastiesForUserQuery {}

export interface GetWeatherForecastsQuery {}

export interface Person {
  id: string;
  createdAt: Date;
  modifiedAt: Date;
  firstname: string | undefined;
  middlename: string | undefined;
  lastname: string | undefined;
  motherId: string | undefined;
  fatherId: string | undefined;
  birthDate: Date | undefined;
  owner: string | undefined;
  relationships: ChildRelationship[] | undefined;
}

export interface Relationship {
  id: string;
  createdAt: Date;
  modifiedAt: Date;
  person: Person;
  personId: string;
  partner: Person;
  partnerId: string | undefined;
  children: ChildRelationship[] | undefined;
}

export interface WeatherForecast {
  date: Date;
  temperatureC: number;
  readonly temperatureF: number;
  summary: string | undefined;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any,
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any,
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
